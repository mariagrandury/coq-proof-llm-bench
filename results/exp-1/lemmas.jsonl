{"id": "univ_inst__en__Cat_Animal__tweety", "lang": "en", "nl_premises": ["All cats are animals.", "Tweety is a cat."], "nl_hypothesis": "Tweety is an animal.", "logic_notes": "∀x. Cat(x) → Animal(x); Cat(tweety) ⊢ Animal(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> Animal x) -> Cat tweety -> Animal tweety.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__en__Mammal_Animal__garfield", "lang": "en", "nl_premises": ["All mammals are animals.", "Garfield is a mammal."], "nl_hypothesis": "Garfield is an animal.", "logic_notes": "∀x. Mammal(x) → Animal(x); Mammal(garfield) ⊢ Animal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Mammal x -> Animal x) -> Mammal garfield -> Animal garfield.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__en__Cat_Animal__tweety__1", "lang": "en", "nl_premises": ["All cats are animals.", "Tweety is a cat."], "nl_hypothesis": "Tweety is an animal.", "logic_notes": "∀x. Cat(x) → Animal(x); Cat(tweety) ⊢ Animal(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> Animal x) -> Cat tweety -> Animal tweety.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__en__Cat_Animal__garfield", "lang": "en", "nl_premises": ["All cats are animals.", "Garfield is a cat."], "nl_hypothesis": "Garfield is an animal.", "logic_notes": "∀x. Cat(x) → Animal(x); Cat(garfield) ⊢ Animal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> Animal x) -> Cat garfield -> Animal garfield.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__en__Mammal_Animal__garfield__1", "lang": "en", "nl_premises": ["All mammals are animals.", "Garfield is a mammal."], "nl_hypothesis": "Garfield is an animal.", "logic_notes": "∀x. Mammal(x) → Animal(x); Mammal(garfield) ⊢ Animal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Mammal x -> Animal x) -> Mammal garfield -> Animal garfield.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__en__Animal_Mammal__tweety", "lang": "en", "nl_premises": ["All animals are mammals.", "Tweety is an animal."], "nl_hypothesis": "Tweety is a mammal.", "logic_notes": "∀x. Animal(x) → Mammal(x); Animal(tweety) ⊢ Mammal(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> Mammal x) -> Animal tweety -> Mammal tweety.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__en__Mammal_Bird__tweety", "lang": "en", "nl_premises": ["All mammals are birds.", "Tweety is a mammal."], "nl_hypothesis": "Tweety is a bird.", "logic_notes": "∀x. Mammal(x) → Bird(x); Mammal(tweety) ⊢ Bird(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Mammal x -> Bird x) -> Mammal tweety -> Bird tweety.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__en__Cat_Mammal__tweety", "lang": "en", "nl_premises": ["All cats are mammals.", "Tweety is a cat."], "nl_hypothesis": "Tweety is a mammal.", "logic_notes": "∀x. Cat(x) → Mammal(x); Cat(tweety) ⊢ Mammal(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Cat : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> Mammal x) -> Cat tweety -> Mammal tweety.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__en__Reptile_Animal__garfield", "lang": "en", "nl_premises": ["All reptiles are animals.", "Garfield is a reptile."], "nl_hypothesis": "Garfield is an animal.", "logic_notes": "∀x. Reptile(x) → Animal(x); Reptile(garfield) ⊢ Animal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> Animal x) -> Reptile garfield -> Animal garfield.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__en__Mammal_Reptile__garfield", "lang": "en", "nl_premises": ["All mammals are reptiles.", "Garfield is a mammal."], "nl_hypothesis": "Garfield is a reptile.", "logic_notes": "∀x. Mammal(x) → Reptile(x); Mammal(garfield) ⊢ Reptile(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Mammal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Mammal x -> Reptile x) -> Mammal garfield -> Reptile garfield.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "negation__en__Cat_Bird__garfield", "lang": "en", "nl_premises": ["No cats are birds.", "Garfield is a cat."], "nl_hypothesis": "Garfield is not a bird.", "logic_notes": "∀x. Cat(x) → ¬Bird(x); Cat(garfield) ⊢ ¬Bird(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> ~ Bird x) -> Cat garfield -> ~ Bird garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__en__Reptile_Animal__tweety", "lang": "en", "nl_premises": ["No reptiles are animals.", "Tweety is a reptile."], "nl_hypothesis": "Tweety is not an animal.", "logic_notes": "∀x. Reptile(x) → ¬Animal(x); Reptile(tweety) ⊢ ¬Animal(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> ~ Animal x) -> Reptile tweety -> ~ Animal tweety.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__en__Cat_Bird__garfield__1", "lang": "en", "nl_premises": ["No cats are birds.", "Garfield is a cat."], "nl_hypothesis": "Garfield is not a bird.", "logic_notes": "∀x. Cat(x) → ¬Bird(x); Cat(garfield) ⊢ ¬Bird(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> ~ Bird x) -> Cat garfield -> ~ Bird garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__en__Bird_Cat__tweety", "lang": "en", "nl_premises": ["No birds are cats.", "Tweety is a bird."], "nl_hypothesis": "Tweety is not a cat.", "logic_notes": "∀x. Bird(x) → ¬Cat(x); Bird(tweety) ⊢ ¬Cat(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> ~ Cat x) -> Bird tweety -> ~ Cat tweety.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__en__Animal_Reptile__garfield", "lang": "en", "nl_premises": ["No animals are reptiles.", "Garfield is an animal."], "nl_hypothesis": "Garfield is not a reptile.", "logic_notes": "∀x. Animal(x) → ¬Reptile(x); Animal(garfield) ⊢ ¬Reptile(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> ~ Reptile x) -> Animal garfield -> ~ Reptile garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__en__Cat_Animal__garfield", "lang": "en", "nl_premises": ["No cats are animals.", "Garfield is a cat."], "nl_hypothesis": "Garfield is not an animal.", "logic_notes": "∀x. Cat(x) → ¬Animal(x); Cat(garfield) ⊢ ¬Animal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> ~ Animal x) -> Cat garfield -> ~ Animal garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__en__Reptile_Cat__garfield", "lang": "en", "nl_premises": ["No reptiles are cats.", "Garfield is a reptile."], "nl_hypothesis": "Garfield is not a cat.", "logic_notes": "∀x. Reptile(x) → ¬Cat(x); Reptile(garfield) ⊢ ¬Cat(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Cat : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> ~ Cat x) -> Reptile garfield -> ~ Cat garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__en__Cat_Bird__tweety", "lang": "en", "nl_premises": ["No cats are birds.", "Tweety is a cat."], "nl_hypothesis": "Tweety is not a bird.", "logic_notes": "∀x. Cat(x) → ¬Bird(x); Cat(tweety) ⊢ ¬Bird(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> ~ Bird x) -> Cat tweety -> ~ Bird tweety.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__en__Bird_Reptile__garfield", "lang": "en", "nl_premises": ["No birds are reptiles.", "Garfield is a bird."], "nl_hypothesis": "Garfield is not a reptile.", "logic_notes": "∀x. Bird(x) → ¬Reptile(x); Bird(garfield) ⊢ ¬Reptile(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> ~ Reptile x) -> Bird garfield -> ~ Reptile garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__en__Reptile_Animal__garfield", "lang": "en", "nl_premises": ["No reptiles are animals.", "Garfield is a reptile."], "nl_hypothesis": "Garfield is not an animal.", "logic_notes": "∀x. Reptile(x) → ¬Animal(x); Reptile(garfield) ⊢ ¬Animal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> ~ Animal x) -> Reptile garfield -> ~ Animal garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "transitivity__en__Reptile_Cat_Animal", "lang": "en", "nl_premises": ["All reptiles are cats.", "All cats are animals."], "nl_hypothesis": "All reptiles are animals.", "logic_notes": "∀x. Reptile(x) → Cat(x); ∀x. Cat(x) → Animal(x) ⊢ ∀x. Reptile(x) → Animal(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> Cat x) -> (forall x:Ind, Cat x -> Animal x) -> (forall x:Ind, Reptile x -> Animal x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__en__Mammal_Animal_Cat", "lang": "en", "nl_premises": ["All mammals are animals.", "All animals are cats."], "nl_hypothesis": "All mammals are cats.", "logic_notes": "∀x. Mammal(x) → Animal(x); ∀x. Animal(x) → Cat(x) ⊢ ∀x. Mammal(x) → Cat(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter Mammal : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Mammal x -> Animal x) -> (forall x:Ind, Animal x -> Cat x) -> (forall x:Ind, Mammal x -> Cat x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__en__Bird_Animal_Mammal", "lang": "en", "nl_premises": ["All birds are animals.", "All animals are mammals."], "nl_hypothesis": "All birds are mammals.", "logic_notes": "∀x. Bird(x) → Animal(x); ∀x. Animal(x) → Mammal(x) ⊢ ∀x. Bird(x) → Mammal(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Bird : Ind -> Prop.", "Parameter Mammal : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> Animal x) -> (forall x:Ind, Animal x -> Mammal x) -> (forall x:Ind, Bird x -> Mammal x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__en__Animal_Mammal_Reptile", "lang": "en", "nl_premises": ["All animals are mammals.", "All mammals are reptiles."], "nl_hypothesis": "All animals are reptiles.", "logic_notes": "∀x. Animal(x) → Mammal(x); ∀x. Mammal(x) → Reptile(x) ⊢ ∀x. Animal(x) → Reptile(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> Mammal x) -> (forall x:Ind, Mammal x -> Reptile x) -> (forall x:Ind, Animal x -> Reptile x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__en__Reptile_Cat_Bird", "lang": "en", "nl_premises": ["All reptiles are cats.", "All cats are birds."], "nl_hypothesis": "All reptiles are birds.", "logic_notes": "∀x. Reptile(x) → Cat(x); ∀x. Cat(x) → Bird(x) ⊢ ∀x. Reptile(x) → Bird(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> Cat x) -> (forall x:Ind, Cat x -> Bird x) -> (forall x:Ind, Reptile x -> Bird x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__en__Cat_Reptile_Mammal", "lang": "en", "nl_premises": ["All cats are reptiles.", "All reptiles are mammals."], "nl_hypothesis": "All cats are mammals.", "logic_notes": "∀x. Cat(x) → Reptile(x); ∀x. Reptile(x) → Mammal(x) ⊢ ∀x. Cat(x) → Mammal(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Cat : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> Reptile x) -> (forall x:Ind, Reptile x -> Mammal x) -> (forall x:Ind, Cat x -> Mammal x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__en__Reptile_Cat_Bird__1", "lang": "en", "nl_premises": ["All reptiles are cats.", "All cats are birds."], "nl_hypothesis": "All reptiles are birds.", "logic_notes": "∀x. Reptile(x) → Cat(x); ∀x. Cat(x) → Bird(x) ⊢ ∀x. Reptile(x) → Bird(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> Cat x) -> (forall x:Ind, Cat x -> Bird x) -> (forall x:Ind, Reptile x -> Bird x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__en__Animal_Reptile_Cat", "lang": "en", "nl_premises": ["All animals are reptiles.", "All reptiles are cats."], "nl_hypothesis": "All animals are cats.", "logic_notes": "∀x. Animal(x) → Reptile(x); ∀x. Reptile(x) → Cat(x) ⊢ ∀x. Animal(x) → Cat(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> Reptile x) -> (forall x:Ind, Reptile x -> Cat x) -> (forall x:Ind, Animal x -> Cat x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__en__Bird_Animal_Reptile", "lang": "en", "nl_premises": ["All birds are animals.", "All animals are reptiles."], "nl_hypothesis": "All birds are reptiles.", "logic_notes": "∀x. Bird(x) → Animal(x); ∀x. Animal(x) → Reptile(x) ⊢ ∀x. Bird(x) → Reptile(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Bird : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> Animal x) -> (forall x:Ind, Animal x -> Reptile x) -> (forall x:Ind, Bird x -> Reptile x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__en__Bird_Mammal_Animal", "lang": "en", "nl_premises": ["All birds are mammals.", "All mammals are animals."], "nl_hypothesis": "All birds are animals.", "logic_notes": "∀x. Bird(x) → Mammal(x); ∀x. Mammal(x) → Animal(x) ⊢ ∀x. Bird(x) → Animal(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Bird : Ind -> Prop.", "Parameter Mammal : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> Mammal x) -> (forall x:Ind, Mammal x -> Animal x) -> (forall x:Ind, Bird x -> Animal x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "univ_inst__es__Mammal_Animal__tweety", "lang": "es", "nl_premises": ["Todos los mamíferos son animales.", "Piolín es un mamífero."], "nl_hypothesis": "Piolín es un animal.", "logic_notes": "∀x. Mammal(x) → Animal(x); Mammal(tweety) ⊢ Animal(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Mammal x -> Animal x) -> Mammal tweety -> Animal tweety.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__es__Animal_Bird__tweety", "lang": "es", "nl_premises": ["Todos los animales son aves.", "Piolín es un animal."], "nl_hypothesis": "Piolín es un ave.", "logic_notes": "∀x. Animal(x) → Bird(x); Animal(tweety) ⊢ Bird(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Bird : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> Bird x) -> Animal tweety -> Bird tweety.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__es__Reptile_Mammal__garfield", "lang": "es", "nl_premises": ["Todos los reptiles son mamíferos.", "Garfield es un reptil."], "nl_hypothesis": "Garfield es un mamífero.", "logic_notes": "∀x. Reptile(x) → Mammal(x); Reptile(garfield) ⊢ Mammal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Mammal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> Mammal x) -> Reptile garfield -> Mammal garfield.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__es__Animal_Bird__garfield", "lang": "es", "nl_premises": ["Todos los animales son aves.", "Garfield es un animal."], "nl_hypothesis": "Garfield es un ave.", "logic_notes": "∀x. Animal(x) → Bird(x); Animal(garfield) ⊢ Bird(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Bird : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> Bird x) -> Animal garfield -> Bird garfield.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__es__Cat_Animal__garfield", "lang": "es", "nl_premises": ["Todos los gatos son animales.", "Garfield es un gato."], "nl_hypothesis": "Garfield es un animal.", "logic_notes": "∀x. Cat(x) → Animal(x); Cat(garfield) ⊢ Animal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> Animal x) -> Cat garfield -> Animal garfield.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__es__Mammal_Bird__garfield", "lang": "es", "nl_premises": ["Todos los mamíferos son aves.", "Garfield es un mamífero."], "nl_hypothesis": "Garfield es un ave.", "logic_notes": "∀x. Mammal(x) → Bird(x); Mammal(garfield) ⊢ Bird(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Mammal x -> Bird x) -> Mammal garfield -> Bird garfield.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__es__Bird_Animal__tweety", "lang": "es", "nl_premises": ["Todos los aves son animales.", "Piolín es un ave."], "nl_hypothesis": "Piolín es un animal.", "logic_notes": "∀x. Bird(x) → Animal(x); Bird(tweety) ⊢ Animal(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Bird : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> Animal x) -> Bird tweety -> Animal tweety.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__es__Animal_Reptile__garfield", "lang": "es", "nl_premises": ["Todos los animales son reptiles.", "Garfield es un animal."], "nl_hypothesis": "Garfield es un reptil.", "logic_notes": "∀x. Animal(x) → Reptile(x); Animal(garfield) ⊢ Reptile(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> Reptile x) -> Animal garfield -> Reptile garfield.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__es__Cat_Reptile__tweety", "lang": "es", "nl_premises": ["Todos los gatos son reptiles.", "Piolín es un gato."], "nl_hypothesis": "Piolín es un reptil.", "logic_notes": "∀x. Cat(x) → Reptile(x); Cat(tweety) ⊢ Reptile(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Cat : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> Reptile x) -> Cat tweety -> Reptile tweety.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__es__Cat_Reptile__tweety__1", "lang": "es", "nl_premises": ["Todos los gatos son reptiles.", "Piolín es un gato."], "nl_hypothesis": "Piolín es un reptil.", "logic_notes": "∀x. Cat(x) → Reptile(x); Cat(tweety) ⊢ Reptile(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Cat : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> Reptile x) -> Cat tweety -> Reptile tweety.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "negation__es__Mammal_Bird__garfield", "lang": "es", "nl_premises": ["Ningún mamífero es ave.", "Garfield es un mamífero."], "nl_hypothesis": "Garfield no es un ave.", "logic_notes": "∀x. Mammal(x) → ¬Bird(x); Mammal(garfield) ⊢ ¬Bird(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Mammal x -> ~ Bird x) -> Mammal garfield -> ~ Bird garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__es__Reptile_Mammal__garfield", "lang": "es", "nl_premises": ["Ningún reptil es mamífero.", "Garfield es un reptil."], "nl_hypothesis": "Garfield no es un mamífero.", "logic_notes": "∀x. Reptile(x) → ¬Mammal(x); Reptile(garfield) ⊢ ¬Mammal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Mammal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> ~ Mammal x) -> Reptile garfield -> ~ Mammal garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__es__Reptile_Mammal__garfield__1", "lang": "es", "nl_premises": ["Ningún reptil es mamífero.", "Garfield es un reptil."], "nl_hypothesis": "Garfield no es un mamífero.", "logic_notes": "∀x. Reptile(x) → ¬Mammal(x); Reptile(garfield) ⊢ ¬Mammal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Mammal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> ~ Mammal x) -> Reptile garfield -> ~ Mammal garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__es__Reptile_Mammal__garfield__2", "lang": "es", "nl_premises": ["Ningún reptil es mamífero.", "Garfield es un reptil."], "nl_hypothesis": "Garfield no es un mamífero.", "logic_notes": "∀x. Reptile(x) → ¬Mammal(x); Reptile(garfield) ⊢ ¬Mammal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Mammal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> ~ Mammal x) -> Reptile garfield -> ~ Mammal garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__es__Animal_Reptile__tweety", "lang": "es", "nl_premises": ["Ningún animal es reptil.", "Piolín es un animal."], "nl_hypothesis": "Piolín no es un reptil.", "logic_notes": "∀x. Animal(x) → ¬Reptile(x); Animal(tweety) ⊢ ¬Reptile(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> ~ Reptile x) -> Animal tweety -> ~ Reptile tweety.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__es__Cat_Animal__tweety", "lang": "es", "nl_premises": ["Ningún gato es animal.", "Piolín es un gato."], "nl_hypothesis": "Piolín no es un animal.", "logic_notes": "∀x. Cat(x) → ¬Animal(x); Cat(tweety) ⊢ ¬Animal(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> ~ Animal x) -> Cat tweety -> ~ Animal tweety.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__es__Reptile_Mammal__garfield__3", "lang": "es", "nl_premises": ["Ningún reptil es mamífero.", "Garfield es un reptil."], "nl_hypothesis": "Garfield no es un mamífero.", "logic_notes": "∀x. Reptile(x) → ¬Mammal(x); Reptile(garfield) ⊢ ¬Mammal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Mammal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> ~ Mammal x) -> Reptile garfield -> ~ Mammal garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__es__Mammal_Cat__garfield", "lang": "es", "nl_premises": ["Ningún mamífero es gato.", "Garfield es un mamífero."], "nl_hypothesis": "Garfield no es un gato.", "logic_notes": "∀x. Mammal(x) → ¬Cat(x); Mammal(garfield) ⊢ ¬Cat(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Cat : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Mammal x -> ~ Cat x) -> Mammal garfield -> ~ Cat garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__es__Bird_Cat__garfield", "lang": "es", "nl_premises": ["Ningún ave es gato.", "Garfield es un ave."], "nl_hypothesis": "Garfield no es un gato.", "logic_notes": "∀x. Bird(x) → ¬Cat(x); Bird(garfield) ⊢ ¬Cat(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> ~ Cat x) -> Bird garfield -> ~ Cat garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__es__Mammal_Bird__garfield__1", "lang": "es", "nl_premises": ["Ningún mamífero es ave.", "Garfield es un mamífero."], "nl_hypothesis": "Garfield no es un ave.", "logic_notes": "∀x. Mammal(x) → ¬Bird(x); Mammal(garfield) ⊢ ¬Bird(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Mammal x -> ~ Bird x) -> Mammal garfield -> ~ Bird garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "transitivity__es__Reptile_Bird_Cat", "lang": "es", "nl_premises": ["Todos los reptiles son aves.", "Todos los aves son gatos."], "nl_hypothesis": "Todos los reptiles son gatos.", "logic_notes": "∀x. Reptile(x) → Bird(x); ∀x. Bird(x) → Cat(x) ⊢ ∀x. Reptile(x) → Cat(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> Bird x) -> (forall x:Ind, Bird x -> Cat x) -> (forall x:Ind, Reptile x -> Cat x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__es__Animal_Mammal_Reptile", "lang": "es", "nl_premises": ["Todos los animales son mamíferos.", "Todos los mamíferos son reptiles."], "nl_hypothesis": "Todos los animales son reptiles.", "logic_notes": "∀x. Animal(x) → Mammal(x); ∀x. Mammal(x) → Reptile(x) ⊢ ∀x. Animal(x) → Reptile(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> Mammal x) -> (forall x:Ind, Mammal x -> Reptile x) -> (forall x:Ind, Animal x -> Reptile x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__es__Reptile_Bird_Animal", "lang": "es", "nl_premises": ["Todos los reptiles son aves.", "Todos los aves son animales."], "nl_hypothesis": "Todos los reptiles son animales.", "logic_notes": "∀x. Reptile(x) → Bird(x); ∀x. Bird(x) → Animal(x) ⊢ ∀x. Reptile(x) → Animal(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Bird : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> Bird x) -> (forall x:Ind, Bird x -> Animal x) -> (forall x:Ind, Reptile x -> Animal x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__es__Reptile_Bird_Animal__1", "lang": "es", "nl_premises": ["Todos los reptiles son aves.", "Todos los aves son animales."], "nl_hypothesis": "Todos los reptiles son animales.", "logic_notes": "∀x. Reptile(x) → Bird(x); ∀x. Bird(x) → Animal(x) ⊢ ∀x. Reptile(x) → Animal(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Bird : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> Bird x) -> (forall x:Ind, Bird x -> Animal x) -> (forall x:Ind, Reptile x -> Animal x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__es__Bird_Cat_Animal", "lang": "es", "nl_premises": ["Todos los aves son gatos.", "Todos los gatos son animales."], "nl_hypothesis": "Todos los aves son animales.", "logic_notes": "∀x. Bird(x) → Cat(x); ∀x. Cat(x) → Animal(x) ⊢ ∀x. Bird(x) → Animal(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> Cat x) -> (forall x:Ind, Cat x -> Animal x) -> (forall x:Ind, Bird x -> Animal x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__es__Mammal_Cat_Animal", "lang": "es", "nl_premises": ["Todos los mamíferos son gatos.", "Todos los gatos son animales."], "nl_hypothesis": "Todos los mamíferos son animales.", "logic_notes": "∀x. Mammal(x) → Cat(x); ∀x. Cat(x) → Animal(x) ⊢ ∀x. Mammal(x) → Animal(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter Mammal : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Mammal x -> Cat x) -> (forall x:Ind, Cat x -> Animal x) -> (forall x:Ind, Mammal x -> Animal x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__es__Cat_Mammal_Reptile", "lang": "es", "nl_premises": ["Todos los gatos son mamíferos.", "Todos los mamíferos son reptiles."], "nl_hypothesis": "Todos los gatos son reptiles.", "logic_notes": "∀x. Cat(x) → Mammal(x); ∀x. Mammal(x) → Reptile(x) ⊢ ∀x. Cat(x) → Reptile(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Cat : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> Mammal x) -> (forall x:Ind, Mammal x -> Reptile x) -> (forall x:Ind, Cat x -> Reptile x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__es__Mammal_Cat_Bird", "lang": "es", "nl_premises": ["Todos los mamíferos son gatos.", "Todos los gatos son aves."], "nl_hypothesis": "Todos los mamíferos son aves.", "logic_notes": "∀x. Mammal(x) → Cat(x); ∀x. Cat(x) → Bird(x) ⊢ ∀x. Mammal(x) → Bird(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter Mammal : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Mammal x -> Cat x) -> (forall x:Ind, Cat x -> Bird x) -> (forall x:Ind, Mammal x -> Bird x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__es__Cat_Mammal_Animal", "lang": "es", "nl_premises": ["Todos los gatos son mamíferos.", "Todos los mamíferos son animales."], "nl_hypothesis": "Todos los gatos son animales.", "logic_notes": "∀x. Cat(x) → Mammal(x); ∀x. Mammal(x) → Animal(x) ⊢ ∀x. Cat(x) → Animal(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter Mammal : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> Mammal x) -> (forall x:Ind, Mammal x -> Animal x) -> (forall x:Ind, Cat x -> Animal x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__es__Cat_Reptile_Animal", "lang": "es", "nl_premises": ["Todos los gatos son reptiles.", "Todos los reptiles son animales."], "nl_hypothesis": "Todos los gatos son animales.", "logic_notes": "∀x. Cat(x) → Reptile(x); ∀x. Reptile(x) → Animal(x) ⊢ ∀x. Cat(x) → Animal(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> Reptile x) -> (forall x:Ind, Reptile x -> Animal x) -> (forall x:Ind, Cat x -> Animal x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "univ_inst__fr__Animal_Mammal__tweety", "lang": "fr", "nl_premises": ["Tous les animaux sont des mammifères.", "Titi est un animal."], "nl_hypothesis": "Titi est un mammifère.", "logic_notes": "∀x. Animal(x) → Mammal(x); Animal(tweety) ⊢ Mammal(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> Mammal x) -> Animal tweety -> Mammal tweety.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__fr__Bird_Mammal__garfield", "lang": "fr", "nl_premises": ["Tous les oiseaux sont des mammifères.", "Garfield est un oiseau."], "nl_hypothesis": "Garfield est un mammifère.", "logic_notes": "∀x. Bird(x) → Mammal(x); Bird(garfield) ⊢ Mammal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> Mammal x) -> Bird garfield -> Mammal garfield.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__fr__Animal_Bird__garfield", "lang": "fr", "nl_premises": ["Tous les animaux sont des oiseaux.", "Garfield est un animal."], "nl_hypothesis": "Garfield est un oiseau.", "logic_notes": "∀x. Animal(x) → Bird(x); Animal(garfield) ⊢ Bird(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Bird : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> Bird x) -> Animal garfield -> Bird garfield.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__fr__Bird_Animal__garfield", "lang": "fr", "nl_premises": ["Tous les oiseaux sont des animaux.", "Garfield est un oiseau."], "nl_hypothesis": "Garfield est un animal.", "logic_notes": "∀x. Bird(x) → Animal(x); Bird(garfield) ⊢ Animal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Bird : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> Animal x) -> Bird garfield -> Animal garfield.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__fr__Cat_Animal__tweety", "lang": "fr", "nl_premises": ["Tous les chats sont des animaux.", "Titi est un chat."], "nl_hypothesis": "Titi est un animal.", "logic_notes": "∀x. Cat(x) → Animal(x); Cat(tweety) ⊢ Animal(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> Animal x) -> Cat tweety -> Animal tweety.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__fr__Reptile_Bird__tweety", "lang": "fr", "nl_premises": ["Tous les reptiles sont des oiseaux.", "Titi est un reptile."], "nl_hypothesis": "Titi est un oiseau.", "logic_notes": "∀x. Reptile(x) → Bird(x); Reptile(tweety) ⊢ Bird(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> Bird x) -> Reptile tweety -> Bird tweety.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__fr__Bird_Cat__garfield", "lang": "fr", "nl_premises": ["Tous les oiseaux sont des chats.", "Garfield est un oiseau."], "nl_hypothesis": "Garfield est un chat.", "logic_notes": "∀x. Bird(x) → Cat(x); Bird(garfield) ⊢ Cat(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> Cat x) -> Bird garfield -> Cat garfield.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__fr__Cat_Bird__tweety", "lang": "fr", "nl_premises": ["Tous les chats sont des oiseaux.", "Titi est un chat."], "nl_hypothesis": "Titi est un oiseau.", "logic_notes": "∀x. Cat(x) → Bird(x); Cat(tweety) ⊢ Bird(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> Bird x) -> Cat tweety -> Bird tweety.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__fr__Cat_Mammal__garfield", "lang": "fr", "nl_premises": ["Tous les chats sont des mammifères.", "Garfield est un chat."], "nl_hypothesis": "Garfield est un mammifère.", "logic_notes": "∀x. Cat(x) → Mammal(x); Cat(garfield) ⊢ Mammal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Cat : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> Mammal x) -> Cat garfield -> Mammal garfield.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "univ_inst__fr__Mammal_Bird__garfield", "lang": "fr", "nl_premises": ["Tous les mammifères sont des oiseaux.", "Garfield est un mammifère."], "nl_hypothesis": "Garfield est un oiseau.", "logic_notes": "∀x. Mammal(x) → Bird(x); Mammal(garfield) ⊢ Bird(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Mammal x -> Bird x) -> Mammal garfield -> Bird garfield.", "category": "quantifiers", "phenomena": ["universal instantiation", "modus ponens"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2. apply H1. exact H2. Qed."}
{"id": "negation__fr__Bird_Mammal__tweety", "lang": "fr", "nl_premises": ["Aucun oiseau n'est mammifère.", "Titi est un oiseau."], "nl_hypothesis": "Titi n'est pas un mammifère.", "logic_notes": "∀x. Bird(x) → ¬Mammal(x); Bird(tweety) ⊢ ¬Mammal(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> ~ Mammal x) -> Bird tweety -> ~ Mammal tweety.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__fr__Bird_Mammal__garfield", "lang": "fr", "nl_premises": ["Aucun oiseau n'est mammifère.", "Garfield est un oiseau."], "nl_hypothesis": "Garfield n'est pas un mammifère.", "logic_notes": "∀x. Bird(x) → ¬Mammal(x); Bird(garfield) ⊢ ¬Mammal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> ~ Mammal x) -> Bird garfield -> ~ Mammal garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__fr__Bird_Cat__garfield", "lang": "fr", "nl_premises": ["Aucun oiseau n'est chat.", "Garfield est un oiseau."], "nl_hypothesis": "Garfield n'est pas un chat.", "logic_notes": "∀x. Bird(x) → ¬Cat(x); Bird(garfield) ⊢ ¬Cat(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> ~ Cat x) -> Bird garfield -> ~ Cat garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__fr__Animal_Cat__garfield", "lang": "fr", "nl_premises": ["Aucun animal n'est chat.", "Garfield est un animal."], "nl_hypothesis": "Garfield n'est pas un chat.", "logic_notes": "∀x. Animal(x) → ¬Cat(x); Animal(garfield) ⊢ ¬Cat(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> ~ Cat x) -> Animal garfield -> ~ Cat garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__fr__Mammal_Animal__tweety", "lang": "fr", "nl_premises": ["Aucun mammifère n'est animal.", "Titi est un mammifère."], "nl_hypothesis": "Titi n'est pas un animal.", "logic_notes": "∀x. Mammal(x) → ¬Animal(x); Mammal(tweety) ⊢ ¬Animal(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Mammal x -> ~ Animal x) -> Mammal tweety -> ~ Animal tweety.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__fr__Bird_Animal__garfield", "lang": "fr", "nl_premises": ["Aucun oiseau n'est animal.", "Garfield est un oiseau."], "nl_hypothesis": "Garfield n'est pas un animal.", "logic_notes": "∀x. Bird(x) → ¬Animal(x); Bird(garfield) ⊢ ¬Animal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Bird : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> ~ Animal x) -> Bird garfield -> ~ Animal garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__fr__Bird_Cat__garfield__1", "lang": "fr", "nl_premises": ["Aucun oiseau n'est chat.", "Garfield est un oiseau."], "nl_hypothesis": "Garfield n'est pas un chat.", "logic_notes": "∀x. Bird(x) → ¬Cat(x); Bird(garfield) ⊢ ¬Cat(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> ~ Cat x) -> Bird garfield -> ~ Cat garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__fr__Bird_Cat__tweety", "lang": "fr", "nl_premises": ["Aucun oiseau n'est chat.", "Titi est un oiseau."], "nl_hypothesis": "Titi n'est pas un chat.", "logic_notes": "∀x. Bird(x) → ¬Cat(x); Bird(tweety) ⊢ ¬Cat(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> ~ Cat x) -> Bird tweety -> ~ Cat tweety.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__fr__Reptile_Bird__tweety", "lang": "fr", "nl_premises": ["Aucun reptile n'est oiseau.", "Titi est un reptile."], "nl_hypothesis": "Titi n'est pas un oiseau.", "logic_notes": "∀x. Reptile(x) → ¬Bird(x); Reptile(tweety) ⊢ ¬Bird(tweety)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Reptile : Ind -> Prop.", "Parameter tweety : Ind."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> ~ Bird x) -> Reptile tweety -> ~ Bird tweety.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "negation__fr__Bird_Animal__garfield__1", "lang": "fr", "nl_premises": ["Aucun oiseau n'est animal.", "Garfield est un oiseau."], "nl_hypothesis": "Garfield n'est pas un animal.", "logic_notes": "∀x. Bird(x) → ¬Animal(x); Bird(garfield) ⊢ ¬Animal(garfield)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Bird : Ind -> Prop.", "Parameter garfield : Ind."], "statement": "Lemma entailment : (forall x:Ind, Bird x -> ~ Animal x) -> Bird garfield -> ~ Animal garfield.", "category": "negation", "phenomena": ["universal implication", "negation"], "allowed_tactics": ["intros", "apply", "assumption", "intro", "eauto", "contradiction"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros Hc Hcat Hrep. apply (Hc garfield); assumption. Qed."}
{"id": "transitivity__fr__Mammal_Reptile_Cat", "lang": "fr", "nl_premises": ["Tous les mammifères sont des reptiles.", "Tous les reptiles sont des chats."], "nl_hypothesis": "Tous les mammifères sont des chats.", "logic_notes": "∀x. Mammal(x) → Reptile(x); ∀x. Reptile(x) → Cat(x) ⊢ ∀x. Mammal(x) → Cat(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Cat : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Mammal x -> Reptile x) -> (forall x:Ind, Reptile x -> Cat x) -> (forall x:Ind, Mammal x -> Cat x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__fr__Cat_Animal_Reptile", "lang": "fr", "nl_premises": ["Tous les chats sont des animaux.", "Tous les animaux sont des reptiles."], "nl_hypothesis": "Tous les chats sont des reptiles.", "logic_notes": "∀x. Cat(x) → Animal(x); ∀x. Animal(x) → Reptile(x) ⊢ ∀x. Cat(x) → Reptile(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> Animal x) -> (forall x:Ind, Animal x -> Reptile x) -> (forall x:Ind, Cat x -> Reptile x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__fr__Reptile_Cat_Bird", "lang": "fr", "nl_premises": ["Tous les reptiles sont des chats.", "Tous les chats sont des oiseaux."], "nl_hypothesis": "Tous les reptiles sont des oiseaux.", "logic_notes": "∀x. Reptile(x) → Cat(x); ∀x. Cat(x) → Bird(x) ⊢ ∀x. Reptile(x) → Bird(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Reptile x -> Cat x) -> (forall x:Ind, Cat x -> Bird x) -> (forall x:Ind, Reptile x -> Bird x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__fr__Animal_Bird_Reptile", "lang": "fr", "nl_premises": ["Tous les animaux sont des oiseaux.", "Tous les oiseaux sont des reptiles."], "nl_hypothesis": "Tous les animaux sont des reptiles.", "logic_notes": "∀x. Animal(x) → Bird(x); ∀x. Bird(x) → Reptile(x) ⊢ ∀x. Animal(x) → Reptile(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Bird : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> Bird x) -> (forall x:Ind, Bird x -> Reptile x) -> (forall x:Ind, Animal x -> Reptile x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__fr__Animal_Mammal_Cat", "lang": "fr", "nl_premises": ["Tous les animaux sont des mammifères.", "Tous les mammifères sont des chats."], "nl_hypothesis": "Tous les animaux sont des chats.", "logic_notes": "∀x. Animal(x) → Mammal(x); ∀x. Mammal(x) → Cat(x) ⊢ ∀x. Animal(x) → Cat(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter Mammal : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> Mammal x) -> (forall x:Ind, Mammal x -> Cat x) -> (forall x:Ind, Animal x -> Cat x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__fr__Animal_Cat_Bird", "lang": "fr", "nl_premises": ["Tous les animaux sont des chats.", "Tous les chats sont des oiseaux."], "nl_hypothesis": "Tous les animaux sont des oiseaux.", "logic_notes": "∀x. Animal(x) → Cat(x); ∀x. Cat(x) → Bird(x) ⊢ ∀x. Animal(x) → Bird(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> Cat x) -> (forall x:Ind, Cat x -> Bird x) -> (forall x:Ind, Animal x -> Bird x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__fr__Cat_Animal_Reptile__1", "lang": "fr", "nl_premises": ["Tous les chats sont des animaux.", "Tous les animaux sont des reptiles."], "nl_hypothesis": "Tous les chats sont des reptiles.", "logic_notes": "∀x. Cat(x) → Animal(x); ∀x. Animal(x) → Reptile(x) ⊢ ∀x. Cat(x) → Reptile(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Cat x -> Animal x) -> (forall x:Ind, Animal x -> Reptile x) -> (forall x:Ind, Cat x -> Reptile x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__fr__Mammal_Bird_Cat", "lang": "fr", "nl_premises": ["Tous les mammifères sont des oiseaux.", "Tous les oiseaux sont des chats."], "nl_hypothesis": "Tous les mammifères sont des chats.", "logic_notes": "∀x. Mammal(x) → Bird(x); ∀x. Bird(x) → Cat(x) ⊢ ∀x. Mammal(x) → Cat(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Bird : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter Mammal : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Mammal x -> Bird x) -> (forall x:Ind, Bird x -> Cat x) -> (forall x:Ind, Mammal x -> Cat x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__fr__Animal_Mammal_Reptile", "lang": "fr", "nl_premises": ["Tous les animaux sont des mammifères.", "Tous les mammifères sont des reptiles."], "nl_hypothesis": "Tous les animaux sont des reptiles.", "logic_notes": "∀x. Animal(x) → Mammal(x); ∀x. Mammal(x) → Reptile(x) ⊢ ∀x. Animal(x) → Reptile(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Mammal : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> Mammal x) -> (forall x:Ind, Mammal x -> Reptile x) -> (forall x:Ind, Animal x -> Reptile x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
{"id": "transitivity__fr__Animal_Cat_Reptile", "lang": "fr", "nl_premises": ["Tous les animaux sont des chats.", "Tous les chats sont des reptiles."], "nl_hypothesis": "Tous les animaux sont des reptiles.", "logic_notes": "∀x. Animal(x) → Cat(x); ∀x. Cat(x) → Reptile(x) ⊢ ∀x. Animal(x) → Reptile(x)", "coq_prelude": ["Parameter Ind : Type.", "Parameter Animal : Ind -> Prop.", "Parameter Cat : Ind -> Prop.", "Parameter Reptile : Ind -> Prop."], "statement": "Lemma entailment : (forall x:Ind, Animal x -> Cat x) -> (forall x:Ind, Cat x -> Reptile x) -> (forall x:Ind, Animal x -> Reptile x).", "category": "quantifiers", "phenomena": ["transitivity", "universal reasoning"], "allowed_tactics": ["intros", "apply", "assumption", "eauto"], "difficulty": "mild", "timeout_sec": 10, "requires_classical": false, "baseline_proof": "Proof. intros H1 H2 x Hx. apply H2, H1, Hx. Qed."}
